{"version":3,"sources":["../../src/db/provider-mongodb.es6"],"names":[],"mappings":"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","file":"provider-mongodb.js","sourcesContent":["import ObjectID         from 'bson-objectid';\nimport { debug }        from '../debug';\nimport QueryResolver    from './queryResolver';\nimport Provider         from './provider';\nimport clone            from 'clone';\n\nexport default class ProviderMongodb extends Provider {\n\tconstructor(db) {\n\t\tsuper();\n\n\t\tObject.defineProperties(this, {\n\t\t\t_db:  {\n\t\t\t\twritable:   true,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue:      db\n\t\t\t},\n\t\t\tname: {\n\t\t\t\tvalue: 'mongodb'\n\t\t\t}\n\t\t});\n\t}\n\n\tcollection(Model) {\n\t\treturn new QueryResolver(this, Model);\n\t}\n\n\tinsert(dbCursor) {\n\t\tlet cursor = this._db.collection(dbCursor.queryResolver.Model.collection());\n\n\t\tdbCursor.__data._id = new ObjectID();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.insert(dbCursor.__data, function (err, result) {\n\t\t\t\terr ? reject(err) : resolve(dbCursor.__data);\n\t\t\t});\n\t\t});\n\t}\n\n\tupdate(dbCursor) {\n\t\tlet cursor = this._db.collection(dbCursor.queryResolver.Model.collection());\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.udpate(dbCursor.__query, dbCursor.__updateQuery, dbCursor.__options, function (err, result) {\n\t\t\t\terr ? reject(err) : resolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\tfindOneAndUpdate(dbCursor, options = {}) {\n\t\tlet cursor = this._db.collection(dbCursor.queryResolver.Model.collection());\n\n\t\tdbCursor.__options.new = true;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.findOneAndUpdate(dbCursor.__query, dbCursor.__updateQuery, dbCursor.__options, function (err, result) {\n\t\t\t\terr ? reject(err) : resolve(result);\n\t\t\t});\n\t\t});\n\t}\n\n\tfind(dbCursor, options = {}) {\n\t\tlet castResult = (res) => {\n\t\t\treturn options.lean ? res : (res && new dbCursor.queryResolver.Model().set(res));\n\t\t};\n\n\t\tlet cursor = this._db.collection(dbCursor.queryResolver.Model.collection());\n\t\tlet { query, select, sort, limit, skip, next, prev } = dbCursor.getState();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (next || prev) {\n\t\t\t\t!query.$and && (query.$and = []);\n\n\t\t\t\tnext && query.$and.push({ _id: { $gt: next } });\n\t\t\t\tprev && query.$and.push({ _id: { $lt: prev } });\n\t\t\t}\n\n\t\t\tquery._id && (query._id = new ObjectID(query._id));\n\n\t\t\tcursor = cursor.find(query, select);\n\n\t\t\tsort && cursor.sort(sort);\n\t\t\tskip && cursor.skip(parseInt(skip, 10));\n\t\t\tlimit && cursor.limit(parseInt(limit, 10));\n\n\t\t\tcursor.toArray((err, result) => {\n\t\t\t\treturn err ? reject(err) : resolve(result.map(castResult));\n\t\t\t});\n\t\t});\n\t}\n\n\tfindOne(dbCursor, options = {}) {\n\t\tlet castResult = (res) => {\n\t\t\treturn options.lean ? res : (res && new dbCursor.queryResolver.Model().set(res));\n\t\t};\n\n\t\tlet cursor = this._db.collection(dbCursor.queryResolver.Model.collection());\n\t\tlet { query, select } = dbCursor.getState();\n\n\t\tquery._id && (query._id = new ObjectID(query._id));\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcursor.findOne(query, select, (err, result) => {\n\t\t\t\treturn err ? reject(err) : resolve(castResult(result));\n\t\t\t});\n\t\t});\n\n\t}\n}"]}